import{_ as s,c as i,o as a,a3 as t}from"./chunks/framework.D42TvibZ.js";const g=JSON.parse('{"title":"在 ESM 中导入 JSON 文件","description":"","frontmatter":{"title":"在 ESM 中导入 JSON 文件","date":"2022-2-19","category":"前端","tags":["javascript","module"],"detail":"在 Node.js 的 ES 模块中处理 JSON 文件，有两种常规解决方案和一种实验性解决方案。"},"headers":[],"relativePath":"posts/import-json-to-esm.md","filePath":"posts/import-json-to-esm.md"}'),e={name:"posts/import-json-to-esm.md"},n=t(`<h1 id="在-esm-中导入-json-文件" tabindex="-1">在 ESM 中导入 JSON 文件 <a class="header-anchor" href="#在-esm-中导入-json-文件" aria-label="Permalink to &quot;在 ESM 中导入 JSON 文件&quot;">​</a></h1><p>有时候，我们需要在 Node.js 的 ES 模块中处理 JSON 文件。但是，当你试图直接在 ES 模块中导入一个 JSON 文件时，Node.js 会抛出一个错误：<code>TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension &quot;.json&quot;</code>。这是因为 Node.js 在使用 <code>import</code> 语句时，默认期望的是 JavaScript 代码。</p><p>目前有两种常规解决方案，和一种实验性解决方案。</p><h2 id="常规方案" tabindex="-1">常规方案 <a class="header-anchor" href="#常规方案" aria-label="Permalink to &quot;常规方案&quot;">​</a></h2><ol><li><p>使用 fs 模块读取和解析 JSON 文件</p><p>Node.js 建议使用 fs 模块并自己完成读取文件和解析的工作。其实就是使用 fs 模块读取 JSON 文件，然后再用 <code>JSON.parse</code> 进行解析。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readFile } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;fs/promises&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./some-file.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>利用 CommonJS 的 <code>require</code> 方法加载 JSON 文件</p><p><code>createRequire</code> 允许你构造 CommonJS 的 <code>require</code> 方法，以便可以使用典型的 CommonJS 功能，例如在 Node.js 中读取 JSON ES 模块。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createRequire } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;module&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRequire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./data.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ol><p>这两种方案的区别在于：</p><ul><li><p><code>require</code> 机制情况下，如果多个模块都加载了同一个 JSON 文件，那么其中一个模块改变了 JS 对象，其他模块中的 JS 对象会跟着改变。这是由 Node 模块的缓存机制造成的，只有一个 JS 对象。</p></li><li><p>第一种方式可以随意改变加载后的 JS 变量，而且各模块互不影响，因为它们都是独立的，是多个 JS 对象。</p></li></ul><h2 id="实验性方案" tabindex="-1">实验性方案 <a class="header-anchor" href="#实验性方案" aria-label="Permalink to &quot;实验性方案&quot;">​</a></h2><p>由于 JSON 模块的提议，允许使用常规的 <code>import</code> 语句在 ES 模块中导入 JSON 数据。你可以通过添加导入断言来表明你要导入的数据类型为 JSON。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./file.json&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p><code>assert { type: &#39;json&#39; }</code> 是一个导入断言，指示模块应该被解析和导入为 json。<code>jsonObject</code> 变量包含解析 <code>file.json</code> 的内容后创建的 JavaScript 对象。</p><p>一个 JSON 模块的内容是使用默认导入的，命名的导入不可用。</p><p>JSON 模块也可以动态导入：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">jsonObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./file.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  assert: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;json&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>当一个 JSON 模块被动态导入时，包括一个 JS 对象，默认的内容在该对象的 <code>default</code> 属性中。</p>`,15),p=[n];function h(l,k,d,r,o,E){return a(),i("div",null,p)}const y=s(e,[["render",h]]);export{g as __pageData,y as default};
